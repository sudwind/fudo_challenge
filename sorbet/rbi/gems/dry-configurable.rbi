# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/dry-configurable/all/dry-configurable.rbi
#
# dry-configurable-1.3.0

module Dry
  def self.Configurable(**options); end
end
module Dry::Configurable
  def self.extended(klass); end
  def self.included(klass); end
  def self.loader; end
  extend Anonymous_Dry_Core_Deprecations_Tagged_3
  extend Anonymous_Module_4
  extend Dry::Core::Deprecations::Interface
  include Dry::Core::Constants
end
module Anonymous_Dry_Core_Deprecations_Tagged_3
end
class Dry::Configurable::Error < StandardError
end
class Dry::Configurable::FrozenConfigError < Dry::Configurable::Error
end
class Dry::Configurable::AlreadyIncludedError < Dry::Configurable::Error
end
module Anonymous_Module_4
  def const_missing(missing); end
end
class Dry::Configurable::Extension < Module
  def config_class; end
  def default_undefined; end
  def extended(klass); end
  def included(klass); end
  def initialize(config_class: nil, default_undefined: nil); end
end
class Dry::Configurable::Config
  def [](name); end
  def []=(name, value); end
  def _configured; end
  def _dry_equalizer_hash; end
  def _settings; end
  def _values; end
  def configured?(key); end
  def dup_for_settings(settings); end
  def dup_values; end
  def finalize!(freeze_values: nil); end
  def hash; end
  def initialize(settings, values: nil); end
  def initialize_copy(source); end
  def method_missing(name, *args); end
  def pristine; end
  def respond_to_missing?(meth, include_private = nil); end
  def setting_name_from_method(method_name); end
  def to_h; end
  def update(values); end
  def values; end
  include Anonymous_Dry_Core_Equalizer_5
  include Dry::Core::Equalizer::Methods
end
module Anonymous_Dry_Core_Equalizer_5
  def cmp?(comparator, other); end
  def hash; end
  def inspect; end
end
module Dry::Configurable::Methods
  def configure(&block); end
  def finalize!(freeze_values: nil); end
end
module Dry::Configurable::ClassMethods
  def __config_build__(settings = nil); end
  def __config_dsl__; end
  def __config_extension__; end
  def __config_reader__; end
  def config; end
  def inherited(subclass); end
  def setting(*, **, &); end
  def settings; end
  include Dry::Configurable::Methods
end
class Dry::Configurable::DSL
  def ast; end
  def compiler; end
  def config_class; end
  def default; end
  def ensure_valid_options(options); end
  def initialize(**options, &block); end
  def options; end
  def setting(name, **options, &block); end
  def valid_and_invalid_options(options); end
end
class Dry::Configurable::Compiler
  def call(ast); end
  def visit(node); end
  def visit_nested(node); end
  def visit_setting(node); end
end
class Dry::Configurable::Setting
  def children; end
  def cloneable?; end
  def constructor; end
  def default; end
  def initialize(name, default:, constructor: nil, children: nil, **options); end
  def mutable; end
  def mutable?; end
  def name; end
  def options; end
  def reader?; end
  def self.mutable_value?(value); end
  def to_value; end
  include Anonymous_Dry_Core_Equalizer_6
  include Dry::Core::Equalizer::Methods
end
module Anonymous_Dry_Core_Equalizer_6
  def cmp?(comparator, other); end
  def hash; end
end
class Dry::Configurable::Settings
  def <<(setting); end
  def [](name); end
  def each(&); end
  def initialize(settings = nil); end
  def initialize_copy(source); end
  def key?(name); end
  def keys; end
  def settings; end
  include Anonymous_Dry_Core_Equalizer_7
  include Dry::Core::Equalizer::Methods
  include Enumerable
end
module Anonymous_Dry_Core_Equalizer_7
  def cmp?(comparator, other); end
  def hash; end
  def inspect; end
end
