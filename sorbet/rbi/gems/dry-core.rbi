# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/dry-core/all/dry-core.rbi
#
# dry-core-1.1.0

module Dry
  def self.Equalizer(*keys, **options); end
end
module Dry::Core
  def self.Equalizer(*keys, **options); end
  def self.loader; end
  include Dry::Core::Constants
end
module Dry::Core::Constants
  def self.included(base); end
end
class Dry::Core::InvalidClassAttributeValueError < StandardError
  def initialize(name, value); end
end
module Dry::Core::Deprecations
  def self.[](tag); end
  def self.announce(name, msg, tag: nil, uplevel: nil); end
  def self.deprecated_name_message(old, new = nil, msg = nil); end
  def self.deprecation_message(name, msg); end
  def self.logger(output = nil); end
  def self.set_logger!(output = nil); end
  def self.warn(msg, tag: nil, uplevel: nil); end
end
class Dry::Core::Deprecations::Tagged < Module
  def extended(base); end
  def initialize(tag); end
end
module Dry::Core::Deprecations::Interface
  def deprecate(old_name, new_name = nil, message: nil); end
  def deprecate_class_method(old_name, new_name = nil, message: nil); end
  def deprecate_constant(constant_name, message: nil); end
  def deprecation_tag(tag = nil); end
  def warn(msg); end
end
class Dry::Core::Equalizer < Module
  def define_cmp_method; end
  def define_hash_method(immutable:); end
  def define_inspect_method; end
  def define_methods(inspect: nil, immutable: nil); end
  def included(descendant); end
  def initialize(*keys, **options); end
end
module Dry::Core::Equalizer::Methods
  def ==(other); end
  def eql?(other); end
end
module Dry::Core::ClassAttributes
  def defines(*args, type: nil, coerce: nil); end
  include Dry::Core::Constants
end
module Dry::Core::Extensions
  def available_extension?(name); end
  def load_extensions(*extensions); end
  def register_extension(name, &block); end
  def self.extended(obj); end
end
class Dry::Core::Container
  def config; end
  extend Anonymous_Dry_Configurable_Extension_1
  extend Dry::Configurable
  extend Dry::Configurable::ClassMethods
  extend Dry::Core::Container::Configuration
  include Dry::Core::Constants
  include Dry::Core::Container::Mixin
end
class Dry::Core::Container::Error < StandardError
end
class Dry::Core::Container::KeyError < KeyError
end
module Dry::Core::Container::Mixin
  def [](key); end
  def _container; end
  def clone; end
  def decorate(key, with: nil, &block); end
  def dup; end
  def each(&); end
  def each_key(&); end
  def freeze; end
  def import(namespace); end
  def key?(key); end
  def keys; end
  def merge(other, namespace: nil, &block); end
  def namespace(namespace, &); end
  def register(key, contents = nil, options = nil, &block); end
  def resolve(key, &); end
  def self.extended(base); end
  def self.included(base); end
end
module Dry::Core::Container::Mixin::Initializer
  def initialize(*, **, &); end
end
module Dry::Core::Container::Configuration
  def configure; end
  def self.extended(klass); end
end
class Dry::Core::Container::Resolver
  def call(container, key); end
  def each(container, &); end
  def each_key(container, &); end
  def key?(container, key); end
  def keys(container); end
end
class Dry::Core::Container::Registry
  def call(container, key, item, options); end
  def factory; end
  def initialize; end
end
class Dry::Core::Container::Config
  def initialize(namespace_separator: nil, resolver: nil, registry: nil); end
  def namespace_separator; end
  def namespace_separator=(arg0); end
  def registry; end
  def registry=(arg0); end
  def resolver; end
  def resolver=(arg0); end
end
module Anonymous_Dry_Configurable_Extension_1
end
class Dry::Core::Container::Item
  def call; end
  def callable?; end
  def initialize(item, options = nil); end
  def item; end
  def map(func); end
  def options; end
  def value?; end
end
class Dry::Core::Container::Item::Factory
  def call(item, options = nil); end
end
class Dry::Core::Container::Item::Callable < Dry::Core::Container::Item
  def call; end
end
