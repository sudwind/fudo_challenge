openapi: 3.0.3
info:
  title: Fudo Challenge API
  description: |
    API for managing products and users in the Fudo Challenge application.
    
    ## Authentication
    All endpoints except user creation and login require a JWT token in the Authorization header.
    To get a token, create a user and then login..
    
    ## Caching
    Product endpoints are cached using Redis. Subsequent requests to the same product
    will be served from cache for better performance.
  version: 1.0.0

servers:
  - url: http://localhost:9292
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from the login endpoint

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
      example:
        error: "Product not found"

    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the product
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Name of the product
          example: "Test Product"
      example:
        id: "123e4567-e89b-12d3-a456-426614174000"
        name: "Test Product"

    CreateProductRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the product
          example: "Test Product"
      example:
        name: "Test Product"

    CreateUserRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        password:
          type: string
          format: password
          description: User's password
          example: "password123"
      example:
        email: "user@example.com"
        password: "password123"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        password:
          type: string
          format: password
          description: User's password
          example: "password123"
      example:
        email: "user@example.com"
        password: "password123"

    LoginResponse:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        token:
          type: string
          description: JWT token for authentication
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      example:
        email: "user@example.com"
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

paths:
  /products:
    get:
      summary: List all products
      description: |
        Returns a list of all products in the system.
        The response is cached for better performance.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
              example:
                products:
                  - id: "123e4567-e89b-12d3-a456-426614174000"
                    name: "Test Product"
                  - id: "123e4567-e89b-12d3-a456-426614174001"
                    name: "Another Product"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Invalid or missing token"
    post:
      summary: Create a new product
      description: |
        Creates a new product in the system.
        The product will be available immediately after creation.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '202':
          description: Product creation accepted
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Name is required"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Invalid or missing token"

  /products/search:
    get:
      summary: Search products by name
      description: |
        Search for products by name.
        The search is case-insensitive and matches partial names.
        Results are cached for better performance.
      security:
        - BearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query
          example: "test"
      responses:
        '200':
          description: List of matching products
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
              example:
                products:
                  - id: "123e4567-e89b-12d3-a456-426614174000"
                    name: "Test Product"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Search query is required"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Invalid or missing token"

  /products/{id}:
    get:
      summary: Get a product by ID
      description: |
        Get a product by its ID.
        The response is cached for better performance.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Product ID
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    $ref: '#/components/schemas/Product'
              example:
                product:
                  id: "123e4567-e89b-12d3-a456-426614174000"
                  name: "Test Product"
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Product not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Invalid or missing token"

  /users/create:
    post:
      summary: Create a new user
      description: |
        Create a new user account.
        The email must be unique.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Email and password are required"
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Email already exists"

  /users/login:
    post:
      summary: Login user
      description: |
        Login with email and password to get a JWT token.
        The token is required for all other endpoints.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Email and password are required"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Invalid email or password" 